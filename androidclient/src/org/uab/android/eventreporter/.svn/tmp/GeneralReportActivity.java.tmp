package org.uab.android.eventreporter;

import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;

import org.uab.android.eventreporter.admin.R;
import org.uab.android.eventreporter.net.NetworkUtils;
import org.uab.android.eventreporter.net.SendDataToServer;
import org.uab.android.eventreporter.utils.GPSLocationListener;
import org.uab.android.eventreporter.utils.Utils;
import org.uab.android.eventreporter.utils.XMLGeneralNotificationParser;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.provider.Settings;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;

public class GeneralReportActivity extends Activity {

	public static final int DIALOG_NO_LOCATION_AVAILABLE = 0;
	public static final int DIALOG_DESCRIPTION_REQUIRED = 1;
	public static final int DIALOG_LOCATION_ERROR = 2;
	private EditText description;
	private Spinner severitySpinner;
	private TextView dateTimeInfo;
	private Button submitButton;
	private Button cancelButton;
	
	private LocationManager lm;
	private GPSLocationListener gpsListener;
	private String bestProvider;
	private Location currentLoc;
	
	private String username;
	
	public String getUsername() {
		return username;
	}
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.general_incident_layout);
		
		description = (EditText) findViewById(R.id.incident_description);
		severitySpinner = (Spinner) findViewById(R.id.severity_spinner);
		dateTimeInfo = (TextView) findViewById(R.id.date_time_information);
		submitButton = (Button) findViewById(R.id.submit_button);
		cancelButton = (Button) findViewById(R.id.cancel_button);
		
		lm = (LocationManager) getSystemService(LOCATION_SERVICE);
		gpsListener = new GPSLocationListener();
	}
	
	@Override
	protected void onStart() {
		super.onStart();
		
		username = getIntent().getStringExtra("username");
		
		ArrayAdapter<CharSequence> sevAdapter = ArrayAdapter.createFromResource(this, 
				R.array.general_severity, android.R.layout.simple_spinner_item);
		sevAdapter.setDropDownViewResource(R.layout.spinner_dropdown_layout);
		severitySpinner.setAdapter(sevAdapter);
		
		DateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT,
				DateFormat.SHORT, Locale.FRANCE);
		dateTimeInfo.setText("Data i hora: " + df.format(new Date(System.currentTimeMillis())));
		
		submitButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				String incDescription = description.getText().toString();
				if ( incDescription.equalsIgnoreCase("") ) {
					showDialog(DIALOG_DESCRIPTION_REQUIRED);
					
				} else {
					currentLoc = gpsListener.getLocation();
					if ( currentLoc==null ) {
						currentLoc = lm.getLastKnownLocation(bestProvider);					}
					
					if ( currentLoc==null ) {
						showDialog(DIALOG_LOCATION_ERROR);
						
					} else {
						String data = XMLGeneralNotificationParser.encode(
								severitySpinner.getSelectedItemPosition(), 
								incDescription, 
								System.currentTimeMillis(), 
								username, 
								currentLoc.getLatitude(), 
								currentLoc.getLongitude());
						
						String message = NetworkUtils.createMessage(Utils.INCIDENT_NOTIFICATION, 
								Utils.DATAGRAM_GN_TYPE, new String[] {data});
						new SendDataToServer(GeneralReportActivity.this).execute(message);
					}
				}
			}
		});
		
		cancelButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				startActivity(new Intent(getApplicationContext(),MainMenuActivity.class)
					.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
					.putExtra("username", username));
				finish();
			}
		});
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		
		bestProvider = lm.getBestProvider(new Criteria(), true);
		if ( bestProvider==null ) {
			showDialog(DIALOG_NO_LOCATION_AVAILABLE);
			
		} else {
			lm.requestLocationUpdates(bestProvider, Utils.UPDATE_MIN_TIME, 
					Utils.UPDATE_MIN_DISTANCE, gpsListener);
		}
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		lm.removeUpdates(gpsListener);
	}
	
	@Override
	protected Dialog onCreateDialog(int id) {
		Dialog dialog;
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		switch (id) {
		case DIALOG_NO_LOCATION_AVAILABLE:
			builder.setMessage(Utils.NO_LOCATION_AVAILABLE)
		   	   .setCancelable(false)
		   	   .setPositiveButton(Utils.OK, new DialogInterface.OnClickListener() {
			
		   		   @Override
		   		   public void onClick(DialogInterface dialog, int which) {
		   			   startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));
		   		   }
		   	   })
		   	   .setNegativeButton(Utils.DISCARD, new DialogInterface.OnClickListener() {
				
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
						finish();
					}
		   	   });
			dialog = builder.create();
			break;
			
		case DIALOG_LOCATION_ERROR:
			builder.setMessage("No s'ha pogut llegir la informaci— de posicionament! Asseguris de " +
					"tenir un servidor de localitzaci— activat.")
				   .setCancelable(false)
				   .setNeutralButton(Utils.OK, new DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				});
			dialog = builder.create();
			break;
			
		case DIALOG_DESCRIPTION_REQUIRED:
			builder.setMessage(Utils.NO_DESCRIPTION_AVAILABLE)
				.setCancelable(false)
				.setNeutralButton(Utils.OK, new DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				});
			dialog = builder.create();
			break;
			
		default:
			dialog = null;
		}
		
		return dialog;
	}
}
